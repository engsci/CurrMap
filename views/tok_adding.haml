- display_subs = Proc.new do |knol|
  %dd
    %dl 
      %dt
        %p
          = knol['name'] 
          - if knol['preferred'] != knol['name']
            = "(#{knol['preferred']})"
        - rels = knol['relns'].reject {|k,v| k.to_s.match(/subtopics$/)}
        - if !rels.empty?
          %p= rels.inspect
      - if knol['subtopics'].empty?
        %dd 
      - else
        - knol['subtopics'].each do |k| 
          - display_subs.call(k)
%h2 Tree of Knowledge Interface
%dl
  %dt= @knol['name']
  - @knol['subtopics'].each do |knol| 
    - display_subs.call(knol)
%hr    
%p Add a new knowledge item.  Indicate hierarchy by forward slashes
%p 
  e.g., to add Math enter 
  %code Math.
  To enter a subtopic of Math, e.g. Calculus, enter 
  %code Math/Calculus
%form(action="/tok-input/knol" method="POST")
  %fieldset
    %legend(for="path") Path for new resource
    %input(type="text" name="path" id="path")
    %input(type="submit" value="Add")
%hr
%p Add synonyms for existing knols; e.g., Enter "Math" and "Mathematics", to make them synonyms
%form(action="/tok-input/syn" method="POST")
  %fieldset
    %legend(for="word1") First word
    %input(type="text" name="word1" id="word1")
    %legend(for="word2") Second word
    %input(type="text" name="word2" id="word2")
    %legend(for="preferred") Is the second word the preferred synonym for the first?
    %input(type="checkbox" name="preferred" id="preferred" value="true")
    %input(type="submit" value="Add")
%hr
%p Add general relations to nodes    
%form(action="/tok-input/rel" method="POST")
  %fieldset
    %legend(for="item1") First item
    %input(type="text" name="item1")
    %legend(for="reln") Relation
    %input(type="text" name="reln")
    %legend(for="item2") Second item
    %input(type="text" name="item2")
    %input(type="submit" value="Add")