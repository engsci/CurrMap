class OldCourseStuff
  
  #validates_length_of :semester, :minimum => 1, :maximum => 1, :allow_blank => true
   # OTHER

   #ID should be key
   #key :course_code

   #references_many :related_concepts, :stored_as => :array, :inverse_of => :courses 
   #references_many :courses, :stored_as => :array, :inverse_of => :related_courses
   def init
     add_nested_docs "activities" do |key,activity|
       if key =~ /^L\d+/
         CouchLecture.new activity
       elsif key =~ /^MT\d+/
         CouchMidterm.new activity
       else
         CouchActivity.new activity
       end
     end
   end

  
  
  def self.find_course(course_code, year)
    Course.where(:course_code => /^#{course_code}/, :delivered_year => year).limit(1)[0]
    #Course.where(:delivered_year => year).where(:course_code => /^P/).limit(1)[0]
  end
  
  
  # use Course.path(...) instead of just @course
  
  def self.path(course, action= :show)
    {:controller => :courses, :action => action, :id => course.short_code, :delivered_year => course.delivered_year }
  end
  
  def available_years
    Course.where(:course_code => /^#{self.short_code}/).map {|c| c.delivered_year }.compact
  end
  
  def lectures
    self.activities.find_all{|a| a.class == Lecture}
  end
  
  def midterms
    self.activities.find_all{|a| a.class == Midterm}
  end
  
  
  def collated_activities
    collated_activities = {}
    self.activities.each do |a|
      collated_activities[a[1]["week"]] ||= {"lectures" => [], "other" => []}
      if a[0] =~ /^L\d+/
        collated_activities[a[1]["week"]]["lectures"] << a
      else
        collated_activities[a[1]["week"]]["other"] << a
      end
    end
    return collated_activities
  end

  # SEARCH
  
end if false

if false
  # CONTROLLER
  
  # GET /courses/1
   # GET /courses/1.xml
   def show_old
     Person #need this in development mode b/c person subclasses aren't being eagerloaded :@

     respond_to do |format|
       format.js {
         #just display the one course, using its docid
         @course = Course.where(:_id => params[:id])[0]
         @course ||= Course.where(:course_code => /^#{params[:id]}/)[0]
       }
       format.html {

         # redirect to most recent
         unless params[:delivered_year]
           if @course = Course.where(:id => BSON::ObjectId(params[:id]))[0]
             redirect_to :id => @course.short_code, :delivered_year => @course.delivered_year
           else
             redirect_to :delivered_year => Course.where(:course_code => /^#{params[:id]}/).desc(:delivered_year).limit(1)[0].delivered_year
           end

         end

         #display the course, with tabs for related courses (same code, different year)
         @courses = Course.where(:course_code => /^#{params[:id]}/).sort_by{|course| course.delivered_year}.reverse
         @course = @courses[0]

         @profs_by_year = {}
         @resources_by_year = {}
         @courses.each do |course|
           course.instructors.each do |prof|
             @profs_by_year[prof] ||= []
             @profs_by_year[prof] << course.delivered_year
           end
           course.resources.each do |resource|
             @resources_by_year[resource] ||= []
             @resources_by_year[resource] << course.delivered_year
           end
         end
         @profs_by_year = @profs_by_year.sort_by{ |p| p.last }.reverse

       }
       format.xml  { render :xml => @course }
     end
   end
end